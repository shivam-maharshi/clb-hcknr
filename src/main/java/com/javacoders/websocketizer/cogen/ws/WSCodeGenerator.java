package com.javacoders.websocketizer.cogen.ws;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import javax.lang.model.element.Modifier;
import javax.websocket.CloseReason;
import javax.websocket.OnClose;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import org.springframework.beans.factory.annotation.Autowired;

import com.javacoders.websocketizer.Framework;
import com.javacoders.websocketizer.InputParam;
import com.javacoders.websocketizer.ParamType;
import com.javacoders.websocketizer.ServiceBlueprint;
import com.javacoders.websocketizer.cogen.CodeGenerator;
import com.javacoders.websocketizer.rest.RestServiceBlueprint;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.MethodSpec.Builder;
import com.squareup.javapoet.TypeSpec;

/**
 * Code Generator (a.k.a. CoGen) is responsible for taking any generic web
 * service represented by a {@link RestServiceBlueprint} and automatically
 * generating a Web Socket service which exposes the same functionality as the
 * service represented by this {@link RestServiceBlueprint}. The service
 * blueprint is generated by Pattern Identifier (a.k.a. PI).
 * 
 * @author shivam.maharshi
 */
public class WSCodeGenerator implements CodeGenerator {

  public static final String WS_REQUEST = "import java.util.HashMap; public class WSRequest<T> { HashMap<String, String> path; HashMap<String, String> query; HashMap<String, String> matrix; T body; public HashMap<String, String> getPath() { return path; } public void setPath(HashMap<String, String> path) { this.path = path; } public HashMap<String, String> getQuery() { return query; } public void setQuery(HashMap<String, String> query) { this.query = query; } public HashMap<String, String> getMatrix() { return matrix; } public void setMatrix(HashMap<String, String> matrix) { this.matrix = matrix; } public T getBody() { return body; } public void setBody(T body) { this.body = body; } }";
  public static final String WS_UTIL = "import java.util.ArrayList; import java.util.HashMap; import java.util.List;import com.google.gson.Gson;public class WSUtil { public static <T> List<Object> parseMessage(String message, Class T) { WSRequest<T> request = new Gson().fromJson(message, WSRequest.class); List<Object> params = new ArrayList<Object>(); HashMap<String, String> path = request.getPath(); for (String key : path.keySet()) params.add(path.get(key)); HashMap<String, String> query = request.getQuery(); for (String key : query.keySet()) params.add(query.get(key)); HashMap<String, String> matrix = request.getMatrix(); for (String key : matrix.keySet()) params.add(matrix.get(key)); if (T != Void.class) { params.add(request.getBody()); } return params; } public static String getJson(Object obj) { return new Gson().toJson(obj); }}";
  private static final String SEP = System.getProperty("file.separator");
  public static int incorrect = 0;
  public static int correct = 0;

  /**
   * Takes a {@link RestServiceBlueprint} created by PI after parsing the web
   * service to be automatically converted into Web Socket service.
   * 
   * @param sb
   * @throws IOException
   */
  @Override
  public void generate(ServiceBlueprint serviceBlueprint) {
    RestServiceBlueprint sb = null;
    try {
      sb = (RestServiceBlueprint) serviceBlueprint;
      MethodSpec onOpen = constructOnOpenMethod();
      MethodSpec onMessage = constructOnMessageMethod(sb);
      MethodSpec onClose = constructOnCloseMethod();
      JavaFile file = JavaFile.builder(sb.getPackageName() + ".autogenerated",
          constructWebSocketServerClass(sb, onOpen, onMessage, onClose)).build();
      file.writeTo(new File(sb.getSourceDir()));
      System.out.println("Successful autogeneration: " + sb.getAutogeneratedPath());
      createFrameworkFile(WS_REQUEST, "WSRequest.java", sb.getPackageName(), sb.getAutogeneratedPath());
      createFrameworkFile(WS_UTIL, "WSUtil.java", sb.getPackageName(), sb.getAutogeneratedPath());
      correct++;
      System.out.println("Correct Blueprint: " + correct);
    } catch (Exception e) {
      e.printStackTrace();
      if (e instanceof NullPointerException) {
        System.out.println("here");
      }
      System.out.println(e);
      incorrect++;
      System.out.println("Incorrect Blueprint: " + incorrect);
    }
  }

  private static void createFrameworkFile(String content, String name, String packge, String path) throws IOException {
    if (!new File(path + "autogenerated" + SEP).exists())
      new File(path + "autogenerated" + SEP).mkdir();
    File file = new File(path + "autogenerated" + SEP + name);
    FileWriter writer = new FileWriter(file);
    writer.write("package " + packge + ".autogenerated;");
    writer.write(content);
    writer.close();
  }

  private static TypeSpec constructWebSocketServerClass(RestServiceBlueprint sb, MethodSpec onOpen,
      MethodSpec onMessage, MethodSpec onClose) {
    AnnotationSpec serverEndpointAnnotation = AnnotationSpec.builder(ServerEndpoint.class)
        .addMember("value", "$S", sb.getEndpoint()).build();

    String methodName = sb.getRequestHandler().getMethod();
    String methodType = sb.getRequestHandler().getMethodType().name();

    TypeSpec.Builder builder = TypeSpec.classBuilder(sb.getClassName() + "_" + methodName + "_" + methodType)
        .addAnnotation(serverEndpointAnnotation).addModifiers(Modifier.PUBLIC);

    if (sb.getFramework() == Framework.SPRING) {
      builder.addField(constructServiceBean(sb, builder));
    }

    builder.addMethod(onOpen).addMethod(onMessage).addMethod(onClose);

    return builder.build();
  }

  private static FieldSpec constructServiceBean(RestServiceBlueprint sb, TypeSpec.Builder builder) {
    return FieldSpec.builder(ClassName.bestGuess(sb.getRequestContext().getInstance()), "service", Modifier.PRIVATE)
        .addAnnotation(Autowired.class).build();
  }

  private static MethodSpec constructOnOpenMethod() {
    return MethodSpec.methodBuilder("onOpen").addAnnotation(OnOpen.class).addException(IOException.class)
        .addModifiers(Modifier.PUBLIC).returns(void.class).addParameter(Session.class, "session")
        .addStatement("$T.out.println($S)", System.class, "WebSocket Opened!").build();
  }

  private static MethodSpec constructOnMessageMethod(RestServiceBlueprint sb) {

    Builder methodBuilder = MethodSpec.methodBuilder("onMessage").addAnnotation(OnMessage.class)
        .addException(IOException.class).addModifiers(Modifier.PUBLIC).returns(void.class)
        .addException(InstantiationException.class).addException(IllegalAccessException.class)
        .addParameter(String.class, "message").addStatement("$T<Object> params = " + sb.getPackageName()
            + ".autogenerated.WSUtil.parseMessage(message, " + getRequestBodyClass(sb) + ".class)", List.class);

    if (sb.getFramework() == Framework.DEFAULT)
      instantiateService(sb, methodBuilder);

    addParametersDefinitionToBuilder(sb, methodBuilder);

    methodBuilder.addStatement("session.getBasicRemote().sendText(" + sb.getPackageName()
        + ".autogenerated.WSUtil.getJson(" + constructMethodInvocation(sb) + "))")
        .addParameter(Session.class, "session");

    return methodBuilder.build();
  }

  private static void instantiateService(RestServiceBlueprint sb, Builder builder) {
    String cls = sb.getRequestContext().getInstance();
    builder.addStatement(cls + " service = " + cls + ".class.newInstance()");
  }

  private static String getRequestBodyClass(RestServiceBlueprint sb) {
    String cls = "Void";
    List<InputParam> params = sb.getInputs();
    for (InputParam param : params) {
      if (param.getType() == ParamType.BODY) {
        cls = param.getDataType();
        break;
      }
    }
    return cls;
  }

  public static void addParametersDefinitionToBuilder(RestServiceBlueprint sb, Builder methodBuilder) {
    List<InputParam> inputs = sb.getInputs();
    for (int i = 0; i < inputs.size(); i++) {
      methodBuilder.addStatement(
          inputs.get(i).getDataType() + " param" + i + " = (" + inputs.get(i).getDataType() + ")params.get(" + i + ")");
    }
  }

  private static String constructMethodInvocation(RestServiceBlueprint sb) {
    List<InputParam> inputs = sb.getInputs();
    StringBuilder params = new StringBuilder();

    if (inputs.size() > 0)
      params.append("param0");

    for (int i = 1; i < inputs.size(); i++) {
      params.append(", ");
      params.append("param" + i);
    }

    return new StringBuilder().append("service.").append(sb.getRequestHandler().getMethod()).append("(")
        .append(params.toString()).append(")").toString();
  }

  private static MethodSpec constructOnCloseMethod() {
    return MethodSpec.methodBuilder("onClose").addAnnotation(OnClose.class).addModifiers(Modifier.PUBLIC)
        .returns(void.class).addException(IOException.class).addParameter(CloseReason.class, "reason")
        .addStatement("session.close()").addStatement("$T.out.println($S)", System.class, "WebSocket Closed!")
        .addParameter(Session.class, "session").build();
  }

}
