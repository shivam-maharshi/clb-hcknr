package com.javacoders.websocketizer.cogen;

import java.io.File;
import java.io.IOException;

import javax.lang.model.element.Modifier;
import javax.websocket.CloseReason;
import javax.websocket.OnClose;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import com.javacoders.websocketizer.ServiceBlueprint;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

/**
 * Code Generator (a.k.a. CoGen) is responsible for taking any generic web
 * service represented by a {@link ServiceBlueprint} and automatically
 * generating a Web Socket service which exposes the same functionality as the
 * service represented by this {@link ServiceBlueprint}. The service blueprint
 * is generated by PI.
 * 
 * @author shivam.maharshi
 */
public class CodeGenerator {

  /**
   * Takes a {@link ServiceBlueprint} created by PI after parsing the web
   * service to be automatically converted into Web Socket service.
   * 
   * @param sb
   */
  public static void generate(ServiceBlueprint sb) {
    
    MethodSpec onOpen = constructOnOpenMethod();
    MethodSpec onMessage = constructOnMessageMethod(sb);
    MethodSpec onClose = constructOnCloseMethod(); 

    JavaFile javaFile = JavaFile.
        builder("com.javacoders.websocketizer.autogenerated", constructWebSocketServerClass(sb, onOpen, onMessage, onClose))
        .build();

    try {
      javaFile.writeTo(new File(System.getProperty("user.dir") + "/src/main/java"));
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
  
  private static TypeSpec constructWebSocketServerClass(ServiceBlueprint sb, MethodSpec onOpen, MethodSpec onMessage, MethodSpec onClose) {
    AnnotationSpec serverEndpointAnnotation = AnnotationSpec.builder(ServerEndpoint.class)
        .addMember("value", "$S", sb.getUrl())
        .build();
    
    String methodName = sb.getRequestHandler().getMethod();
    String methodType = sb.getRequestHandler().getMethodType().name();
    
    return TypeSpec.classBuilder(sb.getName() + "_" + methodName + "_" + methodType)
        .addAnnotation(serverEndpointAnnotation)
        .addModifiers(Modifier.PUBLIC)
        .addMethod(onOpen)
        .addMethod(onMessage)
        .addMethod(onClose)
        .build();
  }
  
  private static MethodSpec constructOnOpenMethod() {
    return MethodSpec
        .methodBuilder("onOpen")
        .addAnnotation(OnOpen.class)
        .addModifiers(Modifier.PUBLIC)
        .returns(void.class)
        .addParameter(Session.class, "session")
        .addStatement("$T.out.println($S)", System.class, "WebSocket Opened!")
        .build();
  }
  
  private static MethodSpec constructOnMessageMethod(ServiceBlueprint sb) {
    return MethodSpec.methodBuilder("onMessage").addAnnotation(OnMessage.class)
        .addException(IOException.class)
        .addModifiers(Modifier.PUBLIC)
        .returns(void.class)
        .addException(InstantiationException.class)
        .addException(IllegalAccessException.class)
        .addParameter(String.class, "message")
        .addStatement(constructMethodParamsDefinition())
        .addStatement(constructMethodInvocation(sb))
        .addStatement("session.getBasicRemote().sendText(output)")
        .addParameter(Session.class, "session")
        .build();
  }
  
  private static MethodSpec constructOnCloseMethod() {
    return MethodSpec.methodBuilder("onClose")
        .addAnnotation(OnClose.class)
        .addModifiers(Modifier.PUBLIC)
        .returns(void.class)
        .addParameter(CloseReason.class, "reason")
        .addStatement("$T.out.println($S)", System.class, "WebSocket Closed!")
        .addParameter(Session.class, "session")
        .build();
  }
  
  private static String constructMethodParamsDefinition() {
    return new StringBuilder("String params = ")
        .append("Util.parseMessage(message)")
        .toString();
  }

  private static String constructMethodInvocation(ServiceBlueprint sb) {
    return new StringBuilder("String output = ")
        .append(sb.getRequestContext().getInstance())
        .append(".class.newInstance().")
        .append(sb.getRequestHandler().getMethod())
        .append("(params)")
        .toString();
  }
  
}
